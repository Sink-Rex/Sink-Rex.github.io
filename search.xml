<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Unity_shader中级篇</title>
    <url>/2020/02/27/Unity-shader%E4%B8%AD%E7%BA%A7%E7%AF%87/</url>
    <content><![CDATA[<p><img src = "http://q59qahcgi.bkt.clouddn.com/2.jpg" width=100%/><br><a id="more"></a></p>
<h1 id="基础光照"><a href="#基础光照" class="headerlink" title="基础光照"></a>基础光照</h1><h2 id="光源"><a href="#光源" class="headerlink" title="光源"></a>光源</h2><p>在光学里，我们使用辐射度来量化光。<br>根据入社的光线数量和方向，无门可以计算出光线的数量和方向，我们称之为出射度。<br>辐射度和出射度的比值满足线性关系，其值为材质的漫反射和高光反射的属性。</p>
<h2 id="吸收和散射"><a href="#吸收和散射" class="headerlink" title="吸收和散射"></a>吸收和散射</h2><p>光线由光源发射出来后，就会与一些物体相交。通常，相交的结果有两个：散射和吸收。</p>
<p>散射只改变光线的方向，但不改变光线的密度和颜色。<br>光线散射后有两种方向：一种会散射带物体内部，成为折射或透射；一种会散射到物体外部，这种现象称为反射。<br>为了计算两种不同的散射方向，高光反射表示物体表面是如何反射光线的，漫反射表示有多少光线会被折射、吸收和散射出表面。</p>
<p>吸收只改变光线的密度和颜色，但不改变光线的方向。</p>
<h2 id="标准光照模型"><a href="#标准光照模型" class="headerlink" title="标准光照模型"></a>标准光照模型</h2><h3 id="自发光-Cemissive"><a href="#自发光-Cemissive" class="headerlink" title="自发光 Cemissive"></a>自发光 C<sub>emissive</sub></h3><p>用于描述当给定一个方向时，一个表面本身会向该方向发射多少辐射量。<br>自发光的计算也很简单，就是直接只用来该材质的自发光颜色：<br><strong>C<sub>emissive</sub>=M<sub>emissive</sub></strong></p>
<h3 id="高光反射-Cspecular"><a href="#高光反射-Cspecular" class="headerlink" title="高光反射 Cspecular"></a>高光反射 C<sub>specular</sub></h3><p>用于描述当光线从光源射到模型表面时，该表面会在完全镜面反射方向散射多少辐射量。</p>
<p><strong>Phong模型</strong><br><img src="http://q59qahcgi.bkt.clouddn.com/60C1A7D7BF90EA9AAE8857A085A0C1B7.png" alt="test"><br><strong>$\vec{r}$ = 2($\vec{n}$ $\cdot$ $\vec{l}$)$\vec{n}$ - $\vec{l}$</strong><br><strong>C<sub>specular</sub> = (C<sub>light</sub> $\cdot$ M<sub>specular</sub>)max(0,$\vec{v}$ $\cdot$ $\vec{r}$)<sup>M<sub>gloss</sub></sup></strong><br>其中，M<sub>gloss</sub>是材质的光泽度，也被称为反光度。它用于控制高光区域的亮点有多宽，其值越大亮点越小。M<sub>specular</sub>是材质的高光反射颜色，它用于控制该材料对于高反射光的强度和颜色。C<sub>light</sub>则是光源的颜色和强度。</p>
<p><strong>Blinn模型</strong><br><img src="http://q59qahcgi.bkt.clouddn.com/D03E4FB4603EFD64B3F382A902742408.png" alt="test"><br>Blinn为了防止计算反向的$\vec{r}$引入了一个新向量$\vec{h}$，他是通过对$\vec{v}$和$\vec{l}$的取平均后再归一化得到的：<strong>$\vec{h}$ = $\frac{\vec{v} + \vec{l}}{|\vec{v} + \vec{l}|}$</strong><br><strong>C<sub>specular</sub> = (C<sub>light</sub> $\cdot$ M<sub>specular</sub>)max(0,$\vec{v}$ $\cdot$ $\vec{h}$)<sup>M<sub>gloss</sub></sup></strong><br>在实验中，入股摄像机和光源的距离足够远，Blinn模型会把$\vec{v}$和$\vec{l}$认为是定值，快于Phong模型，相反若是两者经常变化则Phong模型更快一些。</p>
<h3 id="漫反射-Cdiffuse"><a href="#漫反射-Cdiffuse" class="headerlink" title="漫反射 Cdiffuse"></a>漫反射 C<sub>diffuse</sub></h3><p>用于描述当光线才光源照射到模型表面是，该表面会向每个方向散射多上辐射量。<br>漫反射光照符合兰伯特定律：反射光线的强度与表面法线和光线方向之间夹角的余弦值成正比。<br><strong>C<sub>diffuse</sub>=(C<sub>light</sub> $\cdot$ M<sub>diffuse</sub>)MAX(0, $\vec{n}$ $\cdot$ $\vec{l}$ )</strong><br>$\vec{n}$是表面法线，$\vec{l}$是指向光源的单位向量，M<sub>diffuse</sub>是材质的漫反射颜色，C<sub>light</sub>是光源的颜色。为了防止才背后来的光照照亮，我们使用最大值函数将其截取到0，以防止法线和光源方向的点乘为负值。</p>
<h3 id="环境光-Cambient"><a href="#环境光-Cambient" class="headerlink" title="环境光 Cambient"></a>环境光 C<sub>ambient</sub></h3><p>用于描述其他所有的间接光照。<br>场景所有物体使用同一个环境光所以有：<br><strong>C<sub>ambient</sub>=G<sub>ambient</sub></strong></p>
<h1 id="基础纹理"><a href="#基础纹理" class="headerlink" title="基础纹理"></a>基础纹理</h1><p>计算机图形学第一定律：如果它看起来是对的，那么他就是对的。</p>
<p>纹理的最初目的就是使用一张图片来控制模型的外观。使用纹理映射技术把图贴在模型表面逐纹素的控制模型的颜色。</p>
<p>纹理坐标定义了该顶点在纹理映射中对应的2D坐标，也被称为UV坐标其值被规划到【0，1】范围内。</p>
<h2 id="单张纹理"><a href="#单张纹理" class="headerlink" title="单张纹理"></a>单张纹理</h2>]]></content>
  </entry>
  <entry>
    <title>Hello_World</title>
    <url>/2020/02/26/hello-world/</url>
    <content><![CDATA[<p><img src = "http://q59qahcgi.bkt.clouddn.com/2020.jpg" width=100%/><br><a id="more"></a></p>
<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello_World"></a>Hello_World</h1><h2 id="Github-常用命令练习"><a href="#Github-常用命令练习" class="headerlink" title="Github 常用命令练习"></a>Github 常用命令练习</h2><p>Let’s make a big difference.</p>
<p>-feature-A</p>
<p>-feature-B</p>
<hr>
<h2 id="Markdown-练习"><a href="#Markdown-练习" class="headerlink" title="Markdown 练习"></a>Markdown 练习</h2><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h1 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h1><h2 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h2><h3 id="标题三"><a href="#标题三" class="headerlink" title="标题三"></a>标题三</h3><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><p><em>这会是 斜体 的文字</em><br>_这会是 斜体 的文字_</p>
<p><strong>这会是 粗体 的文字</strong><br><strong>这会是 粗体 的文字</strong></p>
<p>_你也 <strong>组合</strong> 这些符号_</p>
<p><del>这个文字将会被横线删除</del></p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul>
<li>Item 1</li>
<li>Item 2<ul>
<li>Item 2a</li>
<li>Item 2b</li>
</ul>
</li>
</ul>
<ol>
<li>Item 1</li>
<li>Item 2</li>
<li>Item 3<ol>
<li>Item 3a</li>
<li>Item 3b  </li>
</ol>
</li>
</ol>
<h2 id="引用框"><a href="#引用框" class="headerlink" title="引用框"></a>引用框</h2><p>正如 Kanye West 所说：</p>
<blockquote>
<p>We’re living the future so<br>the present is our past.</p>
</blockquote>
<h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'redcarpet'</span></span><br><span class="line">markdown = Redcarpet.new(<span class="string">"Hello World!"</span>)</span><br><span class="line">puts markdown.to_html</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><div class="table-container">
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content from cell 1</td>
<td>Content from cell 2</td>
</tr>
<tr>
<td>Content in the first column</td>
<td>Content in the second column</td>
</tr>
</tbody>
</table>
</div>
<h2 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h2><p>30<sup>th</sup><br>H<sub>2</sub>O</p>
<h2 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h2><p>:smile::blush:<br><a href="http://www.emoji-cheat-sheet.com" target="_blank" rel="noopener">Emoji</a>支持页面</p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><div class="table-container">
<table>
<thead>
<tr>
<th>引用方法</th>
<th>图片</th>
</tr>
</thead>
<tbody>
<tr>
<td>使用七牛云作为图床</td>
<td><img src="http://q59qahcgi.bkt.clouddn.com/logo.jpg?e=1580976835&amp;token=HD5V3YuzhZC8rfF6gg7jukkSUibZ2WIcaruYBL2t:5VAS1BWDEdsVT3CSMReRaZzBFbA=" alt="text"></td>
</tr>
</tbody>
</table>
</div>
]]></content>
  </entry>
  <entry>
    <title>Unity_Shader初级篇</title>
    <url>/2020/02/24/Unity_Shader%E5%88%9D%E7%BA%A7%E7%AF%87/</url>
    <content><![CDATA[<p><img src = "http://q59qahcgi.bkt.clouddn.com/arrival.jpg" width=100%/><br><a id="more"></a></p>
<h1 id="Unity-Shader"><a href="#Unity-Shader" class="headerlink" title="Unity-Shader"></a>Unity-Shader</h1><p>程序员的三大浪漫是编译原理、操作系统、图形学</p>
<h2 id="渲染流水线"><a href="#渲染流水线" class="headerlink" title="渲染流水线"></a>渲染流水线</h2><h3 id="渲染流程的三个阶段：应用阶段、几何阶段、光栅化阶段"><a href="#渲染流程的三个阶段：应用阶段、几何阶段、光栅化阶段" class="headerlink" title="渲染流程的三个阶段：应用阶段、几何阶段、光栅化阶段"></a>渲染流程的三个阶段：应用阶段、几何阶段、光栅化阶段</h3><p>应用阶段：开发者主导的阶段，输出渲染所需的结合信息即渲染图元。<br>几何阶段：与渲染图元打交道，重要任务是输出屏幕空间的二位顶点坐标、每个顶点对应的深度值、着色等相关信息。<br>光栅化阶段：决定每个渲染图元中的那些像素应该绘制在屏幕上。</p>
<p>几何和光栅化阶段在GPU上处理。</p>
<h3 id="CPU和GPU之间的通信"><a href="#CPU和GPU之间的通信" class="headerlink" title="CPU和GPU之间的通信"></a>CPU和GPU之间的通信</h3><ul>
<li>(1)把数据加载到显存：从硬盘加载到RAM再到GPU</li>
<li>(2)设置渲染状态：渲染的状态</li>
<li>(3)调用Draw Call：CPU告诉GPU渲染那个</li>
</ul>
<h3 id="GPU流水线"><a href="#GPU流水线" class="headerlink" title="GPU流水线"></a>GPU流水线</h3><p><img src="http://q59qahcgi.bkt.clouddn.com/IMG_0061%2820200222-124110%29.PNG" alt="text"><br>绿色：完全可编程、黄色：可配置但不可编程、蓝色：由GPU设定、<br>实线：Shader由开发者编程、虚线：Shader可选编程</p>
<p>顶点着色器：完全可编程，实现顶点的空间变换、顶点着色等。<br>曲面细分着色器：可选，用于细分图元。<br>几何着色器：可选，逐图元的着色操作。<br>裁剪<br>屏幕映射：不可配置和编程，把图元坐标转换到屏幕坐标中。</p>
<p>三角形设置：固定函数，计算边界像素的坐标信息<br>三角形遍历：固定函数，判断像素是否被三角网格覆盖，弱覆盖则生成片元<br>片元着色器：完全可编程，逐片元着色、纹理坐标<br>逐片元着色：不可编程，但可配置，修改颜色、深度缓冲、进行混合 </p>
<h3 id="Shader的特色"><a href="#Shader的特色" class="headerlink" title="Shader的特色"></a>Shader的特色</h3><ul>
<li>GPU流水线上一些可高度编程的阶段，而由着着色器编译出来的最终代码是会在GPU上运行的</li>
<li>有一些特定类型的着色器，如顶点着色器、片元着色器等</li>
<li>依靠着色器我们可以控制流水线中的渲染细节，列入用顶点着色器来进行顶点变换以及传递数据，用片元着色器来进行逐项渲染</li>
</ul>
<h2 id="Unity-Shader-基础"><a href="#Unity-Shader-基础" class="headerlink" title="Unity Shader 基础"></a>Unity Shader 基础</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Shader &quot;ShaderName&quot;&#123;</span><br><span class="line">    Properties&#123;</span><br><span class="line">        &#x2F;&#x2F;属性</span><br><span class="line">    &#125;</span><br><span class="line">    SubShader&#123;</span><br><span class="line">        &#x2F;&#x2F;显卡A使用的子着色器</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;可选</span><br><span class="line">        &quot;Tags&quot;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;可选</span><br><span class="line">        &quot;RenderSetup&quot;</span><br><span class="line"></span><br><span class="line">        Pass&#123;</span><br><span class="line">            &#x2F;&#x2F;定义一个完整流程</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    SubShader&#123;</span><br><span class="line">        &#x2F;&#x2F;显卡B使用的子着色器</span><br><span class="line">    &#125;</span><br><span class="line">    Fallback &quot;VertexLit&quot;</span><br><span class="line">    &#x2F;&#x2F;留后路</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="常见的渲染状态设置选项"><a href="#常见的渲染状态设置选项" class="headerlink" title="常见的渲染状态设置选项"></a><center>常见的渲染状态设置选项</center></h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">状态名称</th>
<th style="text-align:center">设置指令</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Cull</td>
<td style="text-align:center">Cull Back/Front/ Off</td>
<td style="text-align:left">设置剔除模式：提出背面/正面/关闭</td>
</tr>
<tr>
<td style="text-align:left">ZTest</td>
<td style="text-align:center">ZTest Less Greater/ LEqual/GEqual/Equal/NotEqual/Always</td>
<td style="text-align:left">设置深度检测时使用的函数</td>
</tr>
<tr>
<td style="text-align:left">ZWrite</td>
<td style="text-align:center">Zwrite On/ Off</td>
<td style="text-align:left">开启/关闭深度</td>
</tr>
<tr>
<td style="text-align:left">Blend</td>
<td style="text-align:center">Blend SrcFactor DstFactor</td>
<td style="text-align:left">开启并设置混合模式</td>
</tr>
</tbody>
</table>
</div>
<h3 id="SubShader的标签类型"><a href="#SubShader的标签类型" class="headerlink" title="SubShader的标签类型"></a><center>SubShader的标签类型</center></h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">标签类型</th>
<th style="text-align:center">说明</th>
<th style="text-align:left">例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Queue</td>
<td style="text-align:center">控制渲染顺序，让透明物体在不透明物体之后渲染</td>
<td style="text-align:left">Tags {“Queue”=”Transparent”}</td>
</tr>
<tr>
<td style="text-align:left">RenderType</td>
<td style="text-align:center">对着色器分类，用于着色器替代</td>
<td style="text-align:left">Tags {“RenderType”=”Opaque”}</td>
</tr>
<tr>
<td style="text-align:left">DisableBatching</td>
<td style="text-align:center">一些SubShader在Unity的批处理时会出现错误，例如使用了模型空间下的坐标进行定点动画。这是可以通过该标签来直接指明使得否对该SubShader使用批处理</td>
<td style="text-align:left">Tags {“DisableBatching”=”True”}</td>
</tr>
<tr>
<td style="text-align:left">ForceNoShadowCasting</td>
<td style="text-align:center">控制使用SubShader的物体是否会投射阴影</td>
<td style="text-align:left">Tags {“ForceNoShadowCasting”=”True”}</td>
</tr>
<tr>
<td style="text-align:left">IgnoreProjector</td>
<td style="text-align:center">如果该标签值为True，那么使用该SubShader的物体将不会受Projector的影响，通常用半透明物体</td>
<td style="text-align:left">Tags {“IgnoreProjector”=”True”}</td>
</tr>
<tr>
<td style="text-align:left">CanUseSpriteAtlas</td>
<td style="text-align:center">当该SubShader使用于精灵(sprites)时，该标签设置为False</td>
<td style="text-align:left">Tags {“CanUseSpriteAtlas”=”False”}</td>
</tr>
<tr>
<td style="text-align:left">PreviewType</td>
<td style="text-align:center">知名材质面板将如何预览该材质。默认情况下，材质将显示一个球，我们可以通过把该标签的值设置为”Plane””SkyBox”来改变预览类型</td>
<td style="text-align:left">Tags {“PreviewType”=”Plane”}</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Pass的标签类型"><a href="#Pass的标签类型" class="headerlink" title="Pass的标签类型"></a><center>Pass的标签类型</center></h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">标签类型</th>
<th style="text-align:center">说明</th>
<th style="text-align:left">例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">LightMode</td>
<td style="text-align:center">定义该Pass在Unity的渲染流水线中的角色</td>
<td style="text-align:left">Tags {“LightMode”=”ForwardBase”}</td>
</tr>
<tr>
<td style="text-align:left">RequireOptions</td>
<td style="text-align:center">用于指定当满足某些条件时才渲染该Pass，他的只是一个有空格分隔的字符串。目前，Unity支持的选项有SoftVegetation。</td>
<td style="text-align:left">Tags {“RequireOptions”=”SoftVegetation”}</td>
</tr>
</tbody>
</table>
</div>
]]></content>
  </entry>
</search>
